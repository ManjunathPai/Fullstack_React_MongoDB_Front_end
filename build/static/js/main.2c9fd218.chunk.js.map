{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/ArticlesList.js","pages/article-content.js","pages/ArticlesListPage.js","pages/NotFoundPage.js","pages/CommentsList.js","pages/UpvotesSection.js","pages/AddCommentForm.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","id","AboutPage","ArticlesList","articles","map","article","key","className","to","name","title","content","substring","ArticlesListPage","articleContent","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","updateCommentOnClick","JSON","stringify","headers","response","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","find","articleInfo","useEffect","console","log","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c9fd218.chunk.js","sourcesContent":["import React from \"react\";\n\nconst HomePage = () => (\n  <>\n    <h1 id=\"header\">Hello, Welcome to My blog!</h1>\n    <p id=\"textColor\">\n      This is a demo application created to demonstrate the React Hooks integartion with Node and Mongo DB.\n      I have added few articles related to\n      Java, React, MongoDB. This application front end is built with React.js\n      library and backend is built with Node.js and Mongo database.\n    </p>\n    <p id=\"textColor\">\n      Ceci est une application de démonstration créée pour démontrer les\n      crochets React intégration avec Node et Mongo DB. J'ai ajouté quelques\n      articles liés à Java, Réagir, MongoDB. Cette application frontale est\n      construite avec React.js la bibliothèque et le backend sont construits\n      avec Node.js et la base de données Mongo.\n    </p>\n    <p id=\"textColor\">\n      Dies ist eine Demoanwendung, die erstellt wurde, um die Integration von\n      React Hooks mit Node und Mongo DB zu demonstrieren. Ich habe einige\n      Artikel zu Java, React, MongoDB hinzugefügt. Dieses Anwendungs-Front-End wird\n      mit der React.js-Bibliothek erstellt und das Back-End wird mit Node.js und\n      der Mongo-Datenbank erstellt.\n    </p>\n    <p id=\"textColor\">\n      Is feidhmchlár taispeána é seo a cruthaíodh chun na React Hooks a léiriú\n      comhtháthú le Nód agus MongoDB. Níl mórán alt curtha agam leis Java,\n      React, SQL. Tá deireadh tosaigh an fheidhmchláir seo tógtha le React.js\n      Tógtar leabharlann agus backend le bunachar sonraí Node.js agus Mongo.\n    </p>\n    <p id=\"textColor\">\n      ಇದು ನೋಡ್ ಮತ್ತು ಮೊಂಗೊ ಡಿಬಿಯೊಂದಿಗೆ ರಿಯಾಕ್ಟ್ ಹುಕ್ಸ್ ಇಂಟಿಗ್ರೇಷನ್ ಅನ್ನು\n      ಪ್ರದರ್ಶಿಸಲು ರಚಿಸಲಾದ ಡೆಮೊ ಅಪ್ಲಿಕೇಶನ್ ಆಗಿದೆ. ನಾನು ಜಾವಾ, ರಿಯಾಕ್ಟ್, MongoDB ಗೆ\n      ಸಂಬಂಧಿಸಿದ ಕೆಲವು ಲೇಖನಗಳನ್ನು ಸೇರಿಸಿದ್ದೇನೆ. ಈ ಅಪ್ಲಿಕೇಶನ್ ಫ್ರಂಟ್ ಎಂಡ್ ಅನ್ನು\n      React.js ಲೈಬ್ರರಿಯೊಂದಿಗೆ ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು ಬ್ಯಾಕೆಂಡ್ ಅನ್ನು Node.js ಮತ್ತು\n      Mongo ಡೇಟಾಬೇಸ್‌ನೊಂದಿಗೆ ನಿರ್ಮಿಸಲಾಗಿದೆ.\n    </p>\n  </>\n);\n\nexport default HomePage;\n","import React from \"react\";\n\nconst AboutPage = () => (\n  <>\n    <h1 id=\"header\">About Me</h1>\n    <p id=\"textColor\">\n      Welcome to my blog! I am Manjunath Pai, Software developer at Allstate\n      India. </p>\n      <p id=\"textColor\">I am Detail-oriented, responsible and committed software engineer\n      with a get-it-done, on-time and high-quality product spirit and 7+ years\n      of experience defining requirements, designing, implementing, testing and\n      delivering complex back-end and web applications using variety of web\n      frameworks and technologies. Technical proficiencies include: Programming\n      Languages: Java,J2EE,Spring MVC, Spring Boot, RESTful Web Services, JSP\n      servlets, Struts, Hibernate Database: SQL, Oracle Servers : IBM WebSphere,\n      Liberty, Tomcat Tools : Eclipse IDE, Spring STS, Git, Serena, JIRA,\n      Jenkins, JUnit, Post Man, Splunk, SOAPUI Plugins : PMD, Find Bugs, Sonar\n      lint. Methodologies: Waterfall, Agile, TDD Certification : AWS certified\n      Solution Architect Associate (Aug 2020). Onsite Exposure: Allstate\n      Northern Ireland, United Kingdom(August 2019 to Oct 2019)\n    </p>\n  </>\n);\n\nexport default AboutPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ArticlesList = ({ articles }) => (\n    <>\n    {articles.map((article, key) => (\n        <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\n            <h3>{article.title}</h3>\n            <p>{article.content[0].substring(0, 150)}...</p>\n        </Link>\n    ))}\n    </>\n);\n\nexport default ArticlesList;","const articles = [\n    {\n    name: \"java\",\n    title: \"Learn Java\",\n    content: [\n      `Java is a high-level, class-based, object-oriented programming language \n      that is designed to have as few implementation dependencies as possible. \n      It is a general-purpose programming language intended to let application \n      developers write once, run anywhere (WORA),[17] meaning that compiled Java code \n      can run on all platforms that support Java without the need for recompilation.\n      Java applications are typically compiled to bytecode that can run on any \n      Java virtual machine (JVM) regardless of the underlying computer architecture.\n      The syntax of Java is similar to C and C++, but has fewer low-level facilities \n      than either of them. The Java runtime provides dynamic capabilities (such as \n        reflection and runtime code modification) that are typically not available in \n        traditional compiled languages. As of 2019, Java was one of the most popular \n        programming languages in use according to GitHub,[19][20] particularly for \n        client-server web applications, with a reported 9 million developers.[21].`,\n    ],\n  },\n  {\n    name: \"reactjs\",\n    title: \"Learn React\",\n    content: [\n      `React (also known as React.js or ReactJS) is a free and open-source front-end \n      JavaScript library for building user interfaces or UI components. It is maintained \n      by Facebook and a community of individual developers and companies.React can be used\n      as a base in the development of single-page or mobile applications. However, React is \n      only concerned with state management and rendering that state to the DOM, so creating \n      React applications usually requires the use of additional libraries for routing, as well \n      as certain client-side functionality.`,\n    ],\n  },\n  {\n    name: \"mongoDB\",\n    title: \"Learn Mongo\",\n    content: [\n      `MongoDB is a source-available cross-platform document-oriented database program.\n      Classified as a NoSQL database program, MongoDB uses JSON-like documents with \n      optional schemas. MongoDB is developed by MongoDB Inc. and licensed under the \n      Server Side Public License.`,\n    ],\n  },\n];\n\nexport default articles;\n","import React from 'react';\nimport ArticlesList from '../components/ArticlesList';\nimport articleContent from './article-content';\n\nconst ArticlesListPage = () => (\n    <>\n    <h1 id=\"header\">Articles</h1>\n    <ArticlesList articles={articleContent} />\n    </>\n);\n\nexport default ArticlesListPage;","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;","import React from 'react';\r\n\r\nconst CommentsList = ({comments})=>(\r\n    <>\r\n    <h3 id=\"textColor\">Comments:</h3>\r\n    {comments.map((comment,key) =>(\r\n        <div className=\"comment\" key={key}>\r\n            <h4>{comment.username}</h4>\r\n            <p>{comment.text}</p>\r\n        </div>\r\n    ))}\r\n    </>\r\n);\r\n\r\nexport default CommentsList;","import React from \"react\";\r\n\r\nconst UpvotesSection = ({articleName,upvotes,setArticleInfo}) => {\r\n    const upvoteArticle=async() =>{ \r\n        const result=await fetch(`/api/articles/${articleName}/upvotesmongo`,{\r\n        method:'post',\r\n    });\r\n    //console.log(\"result is \"+JSON.stringify(await result.json()));\r\n    const body=await result.json();\r\n    setArticleInfo(body);\r\n}\r\n  return <div id=\"upvote-section\">\r\n      <button onClick={()=>upvoteArticle()}>Add Upvote</button>\r\n      <p id=\"textColor\">This post has been upvoted {upvotes} times.</p>\r\n  </div>;\r\n};\r\n\r\n\r\nexport default UpvotesSection;","import React, { useState } from \"react\";\r\n\r\nconst AddCommentForm = ({articleName,setArticleInfo}) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [commentText, setCommentText] = useState(\"\");\r\n\r\n    const updateCommentOnClick= async ()=>{\r\n        const response = await fetch(`/api/articles/${articleName}/add-comments-withmongodb`,{\r\n            method:'post',\r\n            body:JSON.stringify({username,text:commentText}),\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            }\r\n        });\r\n        const body=await response.json();\r\n        setArticleInfo(body);\r\n        setUsername('');\r\n        setCommentText('');\r\n    }\r\n  return (\r\n    <div id=\"add-comment-form\">\r\n      <h3 id=\"textColor\">Add a Comment</h3>\r\n      <label id=\"textColor\">\r\n        Name:\r\n        <input\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(event) => setUsername(event.target.value)}\r\n        />\r\n      </label>\r\n      <label id=\"textColor\">\r\n        Comment:\r\n        <textarea rows=\"4\" cols=\"50\" \r\n        value={commentText} onChange={(event)=>setCommentText(event.target.value)}/>\r\n      </label>\r\n      <button onClick={()=>updateCommentOnClick()}>Add Comment</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCommentForm;\r\n","import React, { useState, useEffect } from \"react\";\nimport ArticlesList from \"../components/ArticlesList\";\nimport NotFoundPage from \"./NotFoundPage\";\nimport articleContent from \"./article-content\";\nimport CommentsList from \"./CommentsList\";\nimport UpvotesSection from \"./UpvotesSection\";\nimport AddCommentForm from \"./AddCommentForm\";\n\nconst ArticlePage = ({ match }) => {\n  const name = match.params.name;\n  const article = articleContent.find((article) => article.name === name);\n  const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n  useEffect(() => {\n    // without db dummy data use below commented line 13 only\n    //setArticleInfo({ upvotes: Math.ceil(Math.random()*10) });\n\n    //calling mongo based api's\n    const fetchData=async()=>{\n      const result = await fetch(`/api/articles/${name}`);\n      console.log(\"result is\" + result);\n      const body = await result.json();\n      console.log(\"body is\" + JSON.stringify(body));\n      setArticleInfo(body);\n    }\n    fetchData();\n  },[name]);\n  if (!article) return <NotFoundPage />;\n\n  const otherArticles = articleContent.filter(\n    (article) => article.name !== name\n  );\n\n  return (\n    <>\n      <h1 id=\"header\">{article.title}</h1>\n      <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo}/>\n      {article.content.map((paragraph, key) => (\n        <p id=\"textColor\" key={key}>{paragraph}</p>\n      ))}\n      <CommentsList comments={articleInfo.comments}/>\n      <AddCommentForm articleName={name} setArticleInfo={setArticleInfo}>Add a Comment</AddCommentForm>\n      <h3>Other Articles:</h3>\n      <ArticlesList articles={otherArticles} />\n    </>\n  );\n};\n\nexport default ArticlePage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n                <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n                <Link to=\"/articles-list\">Articles</Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default NavBar;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport NavBar from './NavBar';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/about\" component={AboutPage} />\n              <Route path=\"/articles-list\" component={ArticlesListPage} />\n              <Route path=\"/article/:name\" component={ArticlePage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}